/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// (-- api-linter: core::0191::java-outer-classname=disabled
//     aip.dev/not-precedent: We need to do this because java clients should use onos classic. --)
// (-- api-linter: core::0191::java-package=disabled --)
// (-- api-linter: core::0191::java-multiple-files=disabled --)
//api-linter -I /Users/renner/go/src/github.com/p4lang/p4runtime/proto -I /Users/renner/go/src/github.com/googleapis/api-common-protos pipelines.proto

syntax = "proto3";

package onos.control.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
// import "google/protobuf/field_mask.proto";

import "p4/config/v1/p4info.proto";
option go_package = "github.com/onosproject/onos-api/go/onos/control";

// Control interface to onos p4 subsystem, pipeline registry
service PipelineRegistry{
  // Create a pipeline to store in the registry
  rpc CreatePipeline(CreatePipelineRequest) returns (Pipeline) {
    option (google.api.http) = {
        post: "/v1/{parent=arch/*}/pipelines"
        body: "pipeline"
    };
    option (google.api.method_signature) = "parent,pipeline";
  }
  // Delete a pipeline from the registry
  rpc DeletePipeline (DeletePipelineRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
        delete: "/v1/{name=arch/*/pipelines/*}"
    };
    option (google.api.method_signature) = "name";
  }

//   // Update a pipeline already in the registry
//   rpc UpdatePipeline (UpdatePipelineRequest) returns (Pipeline) {
//     option (google.api.http) = {
//         patch: "/v1/{pipeline.name=arch/*/pipelines/*}"
//         body: "pipeline"
//     };
//     option (google.api.method_signature) = "pipeline,update_mask";
//   }

  // Get a pipeline from the registry
  rpc GetPipeline (GetPipelineRequest) returns (Pipeline) {
    option (google.api.http) = {
        get: "/v1/{name=arch/*/pipelines/*}"
    };
    option (google.api.method_signature) = "name";
  }
}
//Pipeline resource 
message Pipeline {
    option (google.api.resource) = {
        type: "control.onosproject.org/Pipeline"
        pattern: "arch/{arch}/pipelines/{pipeline}"
    };

    // The Pipeline name in the format of "arch/*/pipelines/*".
    string name = 1 [(google.api.field_behavior) = REQUIRED];
    // User assigned metadata key,values 
    map<string, string> labels = 2;
    // p4info compiler artifact describing the pipeline contents
    p4.config.v1.P4Info p4info = 3 [(google.api.field_behavior) = REQUIRED];
    // target specific binary configuration, could just be json in bmv2 case but all treated same as opaque []byte
    bytes config = 4 [(google.api.field_behavior) = REQUIRED];
    // this is usually generated by the registry surface by pulling the param ids from p4info
    // purpose is for efficient registration space.
    // i.e. for the various roles which want to register particular entity IDs
    repeated p4.config.v1.P4Ids surface = 5;

    // role registration for this pipeline resource
    map<uint64, RoleConfig> roles = 6;
}

message RoleConfig {
    P4Objects p4_objects = 1;
    bool allow_packet_out = 2;
    bool allow_packet_in = 3;
    bool allow_set_forwarding_pipeline_config = 4; 
    google.protobuf.Any extension = 5;
}
message P4Objects {
    repeated uint32 extern_ids = 1;
    repeated uint32 table_ids = 2;
    repeated uint32 action_ids = 3;
    repeated uint32 action_profile_ids = 4;
    repeated uint32 counter_ids = 5; // indirect counters
    repeated uint32 meter_ids = 6; // indirect meters
}

//CreatePipelineRequest wraps main resource pipeline with namespace parent on create
message CreatePipelineRequest {
    // The namespace in which the pipeline should be created.
    string parent = 1 [(google.api.field_behavior) = REQUIRED];
    // The pipeline object being created
    Pipeline pipeline = 2 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference) = {
            type: "control.onosproject.org/Pipeline"
        }];
}

//DeletePipelineRequest ...
message DeletePipelineRequest {
    // The Pipeline name in the format of "arch/*/pipelines/*" to delete
    string name = 1 [(google.api.field_behavior) = REQUIRED];
}

//GetPipelineRequest ...
message GetPipelineRequest {
    // The Pipeline name in the format of "arch/*/pipelines/*" to retrieve
    string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// message UpdatePipelineRequest {
//     // The pipeline to update.
//     //
//     // The pipeline's `name` field is used to identify the pipeline to be updated.
//     // Format: arch/{architecture}/pipelines/{pipeline}
//     Pipeline pipeline = 1 [(google.api.field_behavior) = REQUIRED];
  
//     // TODO ... messy role updates this way no good..
//     // // The list of fields to be updated.
//     // google.protobuf.FieldMask update_mask = 2;
// }