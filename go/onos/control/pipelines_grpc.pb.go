// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.13.0
// source: onos/control/pipelines.proto

package control

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PipelineRegistryClient is the client API for PipelineRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineRegistryClient interface {
	// Create a pipeline to store in the registry
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
	// Delete a pipeline from the registry
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a pipeline from the registry
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
}

type pipelineRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineRegistryClient(cc grpc.ClientConnInterface) PipelineRegistryClient {
	return &pipelineRegistryClient{cc}
}

func (c *pipelineRegistryClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/onos.control.v1.PipelineRegistry/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineRegistryClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/onos.control.v1.PipelineRegistry/DeletePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineRegistryClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/onos.control.v1.PipelineRegistry/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineRegistryServer is the server API for PipelineRegistry service.
// All implementations must embed UnimplementedPipelineRegistryServer
// for forward compatibility
type PipelineRegistryServer interface {
	// Create a pipeline to store in the registry
	CreatePipeline(context.Context, *CreatePipelineRequest) (*Pipeline, error)
	// Delete a pipeline from the registry
	DeletePipeline(context.Context, *DeletePipelineRequest) (*empty.Empty, error)
	// Get a pipeline from the registry
	GetPipeline(context.Context, *GetPipelineRequest) (*Pipeline, error)
	mustEmbedUnimplementedPipelineRegistryServer()
}

// UnimplementedPipelineRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedPipelineRegistryServer struct {
}

func (UnimplementedPipelineRegistryServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedPipelineRegistryServer) DeletePipeline(context.Context, *DeletePipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (UnimplementedPipelineRegistryServer) GetPipeline(context.Context, *GetPipelineRequest) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedPipelineRegistryServer) mustEmbedUnimplementedPipelineRegistryServer() {}

// UnsafePipelineRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineRegistryServer will
// result in compilation errors.
type UnsafePipelineRegistryServer interface {
	mustEmbedUnimplementedPipelineRegistryServer()
}

func RegisterPipelineRegistryServer(s grpc.ServiceRegistrar, srv PipelineRegistryServer) {
	s.RegisterService(&PipelineRegistry_ServiceDesc, srv)
}

func _PipelineRegistry_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineRegistryServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.control.v1.PipelineRegistry/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineRegistryServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineRegistry_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineRegistryServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.control.v1.PipelineRegistry/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineRegistryServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineRegistry_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineRegistryServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.control.v1.PipelineRegistry/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineRegistryServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelineRegistry_ServiceDesc is the grpc.ServiceDesc for PipelineRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onos.control.v1.PipelineRegistry",
	HandlerType: (*PipelineRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipeline",
			Handler:    _PipelineRegistry_CreatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _PipelineRegistry_DeletePipeline_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _PipelineRegistry_GetPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/control/pipelines.proto",
}
