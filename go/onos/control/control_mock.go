// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/control/pipelines_grpc.pb.go

// Package control is a generated GoMock package.
package control

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// MockPipelineRegistryClient is a mock of PipelineRegistryClient interface.
type MockPipelineRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineRegistryClientMockRecorder
}

// MockPipelineRegistryClientMockRecorder is the mock recorder for MockPipelineRegistryClient.
type MockPipelineRegistryClientMockRecorder struct {
	mock *MockPipelineRegistryClient
}

// NewMockPipelineRegistryClient creates a new mock instance.
func NewMockPipelineRegistryClient(ctrl *gomock.Controller) *MockPipelineRegistryClient {
	mock := &MockPipelineRegistryClient{ctrl: ctrl}
	mock.recorder = &MockPipelineRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineRegistryClient) EXPECT() *MockPipelineRegistryClientMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *MockPipelineRegistryClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipeline", varargs...)
	ret0, _ := ret[0].(*Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelineRegistryClientMockRecorder) CreatePipeline(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelineRegistryClient)(nil).CreatePipeline), varargs...)
}

// DeletePipeline mocks base method.
func (m *MockPipelineRegistryClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipeline", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockPipelineRegistryClientMockRecorder) DeletePipeline(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPipelineRegistryClient)(nil).DeletePipeline), varargs...)
}

// GetPipeline mocks base method.
func (m *MockPipelineRegistryClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipeline", varargs...)
	ret0, _ := ret[0].(*Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelineRegistryClientMockRecorder) GetPipeline(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelineRegistryClient)(nil).GetPipeline), varargs...)
}

// MockPipelineRegistryServer is a mock of PipelineRegistryServer interface.
type MockPipelineRegistryServer struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineRegistryServerMockRecorder
}

// MockPipelineRegistryServerMockRecorder is the mock recorder for MockPipelineRegistryServer.
type MockPipelineRegistryServerMockRecorder struct {
	mock *MockPipelineRegistryServer
}

// NewMockPipelineRegistryServer creates a new mock instance.
func NewMockPipelineRegistryServer(ctrl *gomock.Controller) *MockPipelineRegistryServer {
	mock := &MockPipelineRegistryServer{ctrl: ctrl}
	mock.recorder = &MockPipelineRegistryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineRegistryServer) EXPECT() *MockPipelineRegistryServerMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *MockPipelineRegistryServer) CreatePipeline(arg0 context.Context, arg1 *CreatePipelineRequest) (*Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", arg0, arg1)
	ret0, _ := ret[0].(*Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelineRegistryServerMockRecorder) CreatePipeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelineRegistryServer)(nil).CreatePipeline), arg0, arg1)
}

// DeletePipeline mocks base method.
func (m *MockPipelineRegistryServer) DeletePipeline(arg0 context.Context, arg1 *DeletePipelineRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockPipelineRegistryServerMockRecorder) DeletePipeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPipelineRegistryServer)(nil).DeletePipeline), arg0, arg1)
}

// GetPipeline mocks base method.
func (m *MockPipelineRegistryServer) GetPipeline(arg0 context.Context, arg1 *GetPipelineRequest) (*Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", arg0, arg1)
	ret0, _ := ret[0].(*Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelineRegistryServerMockRecorder) GetPipeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelineRegistryServer)(nil).GetPipeline), arg0, arg1)
}

// mustEmbedUnimplementedPipelineRegistryServer mocks base method.
func (m *MockPipelineRegistryServer) mustEmbedUnimplementedPipelineRegistryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPipelineRegistryServer")
}

// mustEmbedUnimplementedPipelineRegistryServer indicates an expected call of mustEmbedUnimplementedPipelineRegistryServer.
func (mr *MockPipelineRegistryServerMockRecorder) mustEmbedUnimplementedPipelineRegistryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPipelineRegistryServer", reflect.TypeOf((*MockPipelineRegistryServer)(nil).mustEmbedUnimplementedPipelineRegistryServer))
}

// MockUnsafePipelineRegistryServer is a mock of UnsafePipelineRegistryServer interface.
type MockUnsafePipelineRegistryServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePipelineRegistryServerMockRecorder
}

// MockUnsafePipelineRegistryServerMockRecorder is the mock recorder for MockUnsafePipelineRegistryServer.
type MockUnsafePipelineRegistryServerMockRecorder struct {
	mock *MockUnsafePipelineRegistryServer
}

// NewMockUnsafePipelineRegistryServer creates a new mock instance.
func NewMockUnsafePipelineRegistryServer(ctrl *gomock.Controller) *MockUnsafePipelineRegistryServer {
	mock := &MockUnsafePipelineRegistryServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePipelineRegistryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePipelineRegistryServer) EXPECT() *MockUnsafePipelineRegistryServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPipelineRegistryServer mocks base method.
func (m *MockUnsafePipelineRegistryServer) mustEmbedUnimplementedPipelineRegistryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPipelineRegistryServer")
}

// mustEmbedUnimplementedPipelineRegistryServer indicates an expected call of mustEmbedUnimplementedPipelineRegistryServer.
func (mr *MockUnsafePipelineRegistryServerMockRecorder) mustEmbedUnimplementedPipelineRegistryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPipelineRegistryServer", reflect.TypeOf((*MockUnsafePipelineRegistryServer)(nil).mustEmbedUnimplementedPipelineRegistryServer))
}
